.\" Copyright (c) 2020-2022 Taylor R. Campbell
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd December 26, 2020
.Dt FIDOCRYPT 1
.Os
.Sh NAME
.Nm fidocrypt
.Nd store a short secret in a file encrypted with U2F/FIDO
.Sh SYNOPSIS
.Nm
.Op Fl dEHqUv
.Op Fl D Ar seed
.Op Fl r Ar rpid
.Op Fl S Ar softfidokey
.Ar command
.Op Ar args...
.Sh DESCRIPTION
The
.Nm
utility stores a short secret in a file encrypted with U2F/FIDO
security keys.
The file is called a
.Em cryptfile ,
and any U2F/FIDO security key enrolled in it with
.Nm Cm enroll
can be used with
.Nm Cm get
to retrieve the stored secret.
.Pp
.Sy WARNING :
.Nm
is a work in progress.
The file format is not yet stable.
.Pp
Each cryptfile stores exactly one secret, and functions as a list of
U2F/FIDO security keys allowed to retrieve the secret, similar to how
.Pa ~/.ssh/authorized_keys
functions as a list of ssh private keys allowed to log in as a user
.Pq see Xr sshd 8 .
The cryptfile secret may be used for other purposes such as a
.Xr cgd 4
disk encryption key; once any copies of the secret are erased, it can
only be retrieved again with both the cryptfile
.Em and
one of the enrolled U2F/FIDO security keys.
.Pp
You can create a cryptfile with a freshly generated secret and enroll
the first U2F/FIDO security key in it with
.Nm Cm enroll .
You can then retrieve the secret with
.Nm Cm get ,
or enroll additional U2F/FIDO security keys in the same cryptfile, as
long as you have one of the enrolled U2F/FIDO security keys.
.Ss Security model
An adversary who can
.Em read
the cryptfile, but does not have access to any of the enrolled
U2F/FIDO security keys, cannot retrieve the stored secret.
.Pp
No security is provided against an adversary who can
.Em modify
the cryptfile.
.Pp
The user of
.Nm Cm get
is responsible for keeping the output secret, e.g. using it only via
.Xr cgdconfig 8
parameters and never storing it elsewhere.
.Ss Common options
.Bl -tag -width Fl
.It Fl v
Verbose output: print the vendor and product ids of the devices being
queried to stderr.
.It Fl q
Quiet \(em suppress messages to the tty prompting taps.
Error messages may still be printed to stderr.
.El
.Ss Debug options
The following options are meant for use during development, debugging,
and/or testing only, not for normal use.
.Bl -tag -width Fl
.It Fl d
Debug output: print various internal diagnostics to stderr.
.Pp
For additional (and very verbose) debug output including the raw
U2F/CTAP transactions, which might include secrets, you may also set
the
.Ev FIDO_DEBUG
environment variable.
.It Fl D Ar seed
Deterministic mode, pseudorandomized by
.Ar seed .
Challenges and, with the
.Fl S
option, enrolled keys, are deterministically generated from
.Ar seed .
.Pp
Not everything is deterministic: signatures generated with the
.Fl S
option are still randomized (bug), and parts of sqlite3 may still be
randomized too.
.It Fl E
Allow experimental cryptfile formats.
.It Fl H
Disable the
.Li hmac-secret
extension.
By default,
.Nm
will automatically take advantage of
.Li hmac-secret
on any device that supports it.
.Pp
.Li hmac-secret
must be enabled or disabled for both
.Nm Cm enroll
and
.Nm Cm get ;
disabling it for one and enabling it for the other will not work.
When
.Li hmac-secret
is disabled, or with devices that don't support it, only
.Li ES256
keys over
.Li P256
(that is, ECDSA with SHA-256 over the curve NIST P-256, also known as
secp256r1)
are supported.
.It Fl r Ar rpid
Set the U2F/FIDO relying party id.
.Pp
.Sy Don't
set the relying party id to the domain name of any web site that you
log into with U2F/FIDO.
.Pp
If omitted, defaults to the value of the
.Ev FIDOCRYPT_RPID
environment variable if set, or to
.Ql fidocrypt:
otherwise.
.It Fl S Ar softfidokey
Instead of whatever U2F/FIDO devices are available in the system, use a
software U2F/FIDO key stored at
.Ar softfidokey .
May be specified multiple times to load multiple software keys.
.Pp
This option is intended only for internal testing.
The format of the file
.Ar softfidokey
is unstable; consult the implementation for details.
.It Fl U
Leave memory unlocked.
Memory used by fidocrypt may be swapped to nonvolatile storage.
This is unsafe except on systems with encrypted swap.
.El
.Ss Commands
.Bl -tag -width Cm
.It Cm backup Ar cryptfile Ar backup
Create a backup copy of
.Ar cryptfile
at
.Ar backup .
This is like
.Dl cp Ar cryptfile Ar backup
if there are no concurrent changes to
.Ar cryptfile ,
but
.Nm Cm backup
will safely make a backup of a snapshot of
.Ar cryptfile
even if
.Nm Cm enroll ,
.Nm Cm rename ,
etc., are happening at the same time.
.It Cm enroll Oo Fl N Ar username Oc Oo Fl u Ar userid Oc Oo Fl n Ar nickname Oc Oo Fl s Ar secretfile Oc Oo Fl t Ar type Oc Ar cryptfile
Enroll a new U2F/FIDO security key in the cryptfile so that the
security key can be used to retrieve the cryptfile's secret later.
.Pp
If the cryptfile does not exist yet, it is created with a new 32-byte
secret chosen uniformly at random.
Otherwise, you will be prompted to tap an enrolled U2F/FIDO security
key.
.Pp
You will then be prompted to tap a new U2F/FIDO security key, not
currently enrolled in
.Ar cryptfile ,
to enroll, and then tap it again to verify the enrollment.
.Pp
Options:
.Bl -tag -width Fl
.It Fl N Ar username
Set username to send to the U2F/FIDO security key.
This has no particular meaning to
.Nm
but some U2F/FIDO security keys may display it on a screen or require
it to be nonempty.
.Pp
If omitted, defaults to the value of the
.Ev FIDOCRYPT_USERNAME
environment variable if set, or to
.Ql fidocrypt(1)
otherwise.
.It Fl u Ar userid
Set user id to send to the U2F/FIDO security key.
This has no particular meaning to
.Nm
but some U2F/FIDO security keys may display it on a screen or require
it to be nonempty.
.Pp
If omitted, defaults to the value of the
.Ev FIDOCRYPT_USERID
environment variable if set, or to
.Ql fidocrypt
otherwise.
.It Fl n Ar nickname
Set a nickname in the cryptfile for the newly enrolled U2F/FIDO
security key, for display in
.Nm Cm list
and for use with
.Nm Cm unenroll
or
.Nm Cm rename .
.Pp
A nickname must be a UTF-8 string at most 128 bytes long with no
control characters (Unicode general category Cc, code points U+0000
through U+001f and U+007f through U+009f).
.It Fl s Ar secretfile
Override the secret by using the content of
.Ar secretfile ,
or standard input if
.Ar secretfile
is
.Ql - ,
instead of an existing stored secret or a newly generated one.
.Ar secretfile
must be at most 65536 bytes long.
.Pp
.Sy WARNING :
Dangerous option \(em handle with care.
Meant only for testing purposes or for using
.Nm
from an application that has already retrieved the secret using another
U2F/FIDO security key, in order to reduce the amount of device tapping.
If abused, may corrupt a cryptfile, causing it to store different
secrets for different U2F/FIDO security keys.
.It Fl t Ar type
Choose a credential type.
The following types are supported:
.Pp
.Bl -tag -width ".Li es256-p256" -compact
.It Li es256-p256
ECDSA with SHA-256 over the curve NIST P-256.
.It Li ed25519
EdDSA over the curve edwards25519 with SHA-512.
.El
.Pp
By default,
.Nm
uses
.Li es256-p256 ;
essentially all U2F/FIDO devices support it, and it is the only
credential type supported by U2F-only devices.
.El
.It Cm get Fl F Ar format Ar cryptfile
Get the secret stored in the cryptfile and print it to stdout in the
specified format.
You will be prompted to tap a U2F/FIDO security key that is enrolled in
.Ar cryptfile .
The supported formats are:
.Bl -tag -width base64
.It none
Don't actually print anything \(em only verify that the U2F/FIDO
security key is enrolled.
.It raw
Print the raw bytes of the stored secret.
.It base64
Print the stored secret encoded in base64.
.El
.Pp
The
.Fl F Ar format
argument is mandatory \(em that way, you won't inadvertently either
screw up your terminal or feed base64 data into a program that expects
raw bytes.
.It Cm list Ar cryptfile
List the credentials in
.Ar cryptfile ,
by internally assigned numeric id and by the optional
.Ar nickname
passed to
.Nm Cm enroll .
.It Cm rename Oo Fl i Ar id Oc Oo Fl n Ar nickname Oc Ar cryptfile Ar newname
Set a nickname for an existing U2F/FIDO security key enrolled in
.Ar cryptfile .
The enrollment may be selected by numeric id with
.Fl i
as shown in
.Nm Cm list
output, or by nickname with
.Fl n .
.It Cm unenroll Oo Fl i Ar id Oc Oo Fl n Ar nickname Oc Ar cryptfile
Unenroll a U2F/FIDO security key from
.Ar cryptfile
so will no longer pass
.Nm Cm get .
The enrollment may be selected by numeric id with
.Fl i
as shown in
.Nm Cm list
output, or by nickname with
.Fl n .
.El
.Ss Security properties
.Bl -bullet
.It
An adversary without the cryptfile can't retrieve the stored secret,
even if they have all of the enrolled U2F/FIDO devices.
.It
An adversary without at least one of the U2F/FIDO devices enrolled in a
cryptfile can't retrieve the secret stored in it, even if they have the
cryptfile.
.It
An adversary without at least one of the U2F/FIDO devices enrolled in a
cryptfile can't fool
.Nm Cm get
into passing with it.
.El
.Pp
N.B.:
.Nm
.Em does not
defend against a compromised host while cryptfile is being decrypted,
and can't defend against any attacker who has access to the stored
secret in the host's memory once decrypted.
.Pp
.Nm
also doesn't defend against a poorly designed U2F/FIDO device that both
(a) exposes the public key in the credential id and (b) lacks support
for the
.Li hmac-secret
extension.
Fortunately, credential ids are almost always either ciphertext
themselves, encrypted with a secret key stored on the U2F/FIDO device,
or a random input to a pseudorandom function under a secret key stored
on the U2F/FIDO device.
.Sh ENVIRONMENT
.Bl -tag -width ".Ev FIDOCRYPT_USERNAME"
.It Ev FIDOCRYPT_RPID
Relying party id.
Overridden by the
.Fl r
option.
.It Ev FIDOCRYPT_USERID
User id for
.Nm Cm enroll .
Overridden by the
.Fl u
option.
.It Ev FIDOCRYPT_USERNAME
User name for
.Nm Cm enroll .
Overridden by the
.Fl N
option.
.El
.Sh EXAMPLES
.Bd -literal -offset indent
$ fidocrypt enroll -N Falken -u falken -n yubi5nano example.crypt
tap key to enroll; waiting...
tap key again to verify; waiting...
$ fidocrypt list example.crypt
1 yubi5nano
$ fidocrypt get example.crypt
fidocrypt: specify an output format (-F)
Usage: fidocrypt get -F <format> <cryptfile>
$ fidocrypt get -F base64 example.crypt
tap key; waiting...
yTpyXp1Hk3F48Wx3Mp7B2gNOChPyPW0VOH3C7l5AM9A=
$ fidocrypt enroll -N Falken -u falken -n redsolokey example.crypt
tap a key that's already enrolled; waiting...
tap key to enroll; waiting...
tap key again to verify; waiting...
$ fidocrypt get -F base64 example.crypt
tap key; waiting...
yTpyXp1Hk3F48Wx3Mp7B2gNOChPyPW0VOH3C7l5AM9A=
$ fidocrypt rename -n redsolokey example.crypt blacksolokey
$ fidocrypt list example.crypt
2 blacksolokey
1 yubi5nano
.Ed
.Pp
Once you have created a cryptfile named
.Pa cgd.crypt
with several U2F/FIDO security keys enrolled, create a
.Xr cgd 4
parameters file that combines a password and the fidocrypt secret:
.Bd -literal -offset indent
algorithm adiantum;
iv-method encblkno1;
keylength 256;
verify_method gpt;
keygen pkcs5_pbkdf2/sha1 {
    iterations 458588;
    salt AAAAgNXFkicvB33MhEfPLnXF2AI=;
};
keygen shell_cmd {
    cmd "fidocrypt get -F raw cgd.crypt";
};
.Ed
.Pp
This way, the
.Xr cgd 4
disk can be opened only with the password
.Em and
at least one of the U2F/FIDO security keys (and the
.Xr cgd 4
parameters file).
.Sh DIAGNOSTICS
.Ex -std
.Bl -diag
.It "fidocrypt: no matching devices found"
None of the available U2F/FIDO security keys is enrolled in the
cryptfile when trying to retrieve the secret from it, or all of the
available U2F/FIDO security keys are already enrolled when trying to
enroll a new one.
This can also happen if you explicitly specify an empty username or
user id in
.Nm Cm enroll .
.El
.Sh SEE ALSO
.Xr pamu2fcfg 1 ,
.Xr fidocrypt 3
.Rs
.%A Joseph Birr-Pixton
.%T Abusing U2F to 'store' keys
.%D 2015-11-23
.%U https://jbp.io/2015/11/23/abusing-u2f-to-store-keys.html
.Re
.Rs
.%A Rolf Lindemann
.%A Vijay Bharadwaj
.%A Alexei Czeskis
.%A Michael B. Jones
.%A Jeff Hodges
.%A Akshay Kumar
.%A Christiaan Brand
.%A Johan Verrept
.%A Jakob Ehrensv\(:ard
.%T Client To Authenticator Protocol
.%D 2017-09-27
.%Q FIDO Alliance
.%U https://fidoalliance.org/specs/fido-v2.0-ps-20170927/fido-client-to-authenticator-protocol-v2.0-ps-20170927.html
.Re
.Rs
.%A Dirk Balfanz
.%A Alexei Czeskis
.%A Jeff Hodges
.%A J.C. Jones
.%A Michael B. Jones
.%A Akshay Kumar
.%A Angelo Liao
.%A Rolf Lindemann
.%A Emil Lundberg
.%T Web Authentication: \&An API for accessing Public Key Credentials Level\~1
.%D 2019-03-04
.%Q World Wide Web Consortium
.%U https://www.w3.org/TR/webauthn-1/
.Re
.Sh CAVEATS
.Nm
works only with U2F devices, and with FIDO2 devices that either
(a) support ECDSA over NIST P-256, or
(b) support the
.Li hmac-secret
extension.
.Nm
also only supports ECDSA over NIST P-256 and Ed25519 to date.
(Fortunately, essentially all U2F/FIDO devices on the market as of 2020
support ECDSA over NIST P-256 \(em and it is even hard to find ones
that support any other credential types such as
.Li RS256 . )
.Pp
.Nm
is not meant for storing very large secrets or enrolling very large
numbers of U2F/FIDO security keys \(em you are expected to use a
primary key and a handful of backups stored in safe places, to encrypt
a 32-byte secret key for another purpose.
.Pp
.Nm
uses
.Xr mlockall 2
to lock memory into RAM so that it doesn't spill secrets onto swap
space, in case swap is stored in cleartext.
.Nm
tries to reasonably limit memory utilization, but may run into resource
limits because of this; see
.Xr setrlimit 2 .
.Sh BUGS
User ids can't have NUL bytes.
.Pp
.Nm
has no way to wait for the user to insert a U2F/FIDO security key.
On a machine with only one USB port, enrolling a new security key in a
fidocrypt that already has another one enrolled can be frustrating.
Workaround:
.Bl -enum
.It
First save the secret to a temporary file (ideally in tmpfs) with one
security key plugged in.
.It
Then unplug it and plug in the other security key.
.It
Finally enroll the other security key using the same secret with the
.Fl s
option to
.Nm Cm enroll .
.El
